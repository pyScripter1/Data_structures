# Дерево — это иерархическая структура данных, состоящая из узлов, соединенных ребрами.
#
# Каждый узел содержит значение и ссылки на свои дочерние узлы.

# Структура данных дерева похожа на связанные списки в том,
# что каждый узел содержит данные и может быть связан с другими узлами.
#
# Ранее мы рассматривали такие структуры данных, как массивы,
# связанные списки, стеки и очереди. Все они являются линейными структурами,
# что означает, что каждый элемент следует непосредственно за другим в последовательности.
# Однако деревья отличаются. В дереве один элемент может иметь несколько «следующих»
# элементов, что позволяет структуре данных разветвляться в различных направлениях.
#
# Структура данных называется «деревом», потому что она похожа на древовидную структуру.


# Структура данных «Дерево» может быть полезна во многих случаях:
#
# Иерархические данные: файловые системы, организационные модели и т. д.
# Базы данных: используются для быстрого поиска данных.
# Таблицы маршрутизации: используются для маршрутизации данных в сетевых алгоритмах.
# Сортировка/Поиск: используется для сортировки и поиска данных.
# Приоритетные очереди: Структуры данных приоритетных очередей обычно реализуются с использованием деревьев, таких как двоичные кучи.

# Виды деревьев
# Деревья — это фундаментальная структура данных в информатике,
# используемая для представления иерархических отношений.
# В этом руководстве рассматриваются несколько ключевых типов деревьев.
#
# Двоичные деревья: каждый узел имеет до двух потомков,
# левый дочерний узел и правый дочерний узел. Эта структура является основой для более
# сложных типов деревьев, таких как Binay Search Trees и AVL Trees.
#
# Двоичные деревья поиска (BST): тип двоичного дерева, в котором для каждого узла
# левый дочерний узел имеет меньшее значение, а правый дочерний узел имеет большее значение.
#
# AVL-деревья: тип двоичного дерева поиска, который самобалансируется так,
# что для каждого узла разница в высоте между левым и правым поддеревьями не превышает единицы.
# Этот баланс поддерживается посредством поворотов при вставке или удалении узлов.

# Преимущества деревьев по сравнению с массивами и связанными списками:
#
# Массивы быстры, когда вы хотите получить прямой доступ к элементу, например, к элементу номер 700 в массиве из 1000 элементов.
# Но вставка и удаление элементов требуют смещения других элементов в памяти, чтобы освободить место для нового элемента или занять место удаленных элементов, а это занимает много времени.
#
# Связанные списки работают быстро при вставке или удалении узлов, не требуется смещение памяти,
# но для доступа к элементу внутри списка необходимо выполнить обход всего списка, а это занимает время.
#
# Деревья , такие как двоичные деревья, двоичные деревья поиска и деревья AVL, превосходят массивы и
# связанные списки, поскольку они ОБА быстро осуществляют доступ к узлу, А ТАКЖЕ быстро удаляют или
# вставляют узел, не требуя при этом никаких перемещений в памяти.